@page "/matchword"

@inject ILoggningService _log
@inject IFaqService _faq
@inject ISettingsService setting
@inject NavigationManager nav

<div class="mx-auto max-w-3xl text-center">
    <h2 class="text-3xl font-bold tracking-tight text-gray-900 sm:text-4xl">@TextHelperResFile.TopTitleTextMatch.ReplaceText(null)</h2>
    <p class="leading-8 mt-2 text-lg text-gray-600">@TextHelperResFile.TopDeckTextMatch.ReplaceText(null)</p>
    <AlertInformation Message="@message"
                      Status="@status" />
</div>
<EditForm Model="@matchitemModel" FormName="matchModel" OnSubmit="HandleSubmitMatch" class="mx-auto mt-4 max-w-3xl">
    <div class="grid-cols-1 grid gap-x-8 gap-y-6 sm:grid-cols-4">
        <div class="sm:col-span-2">
            <div class="mt-2.5">
                <InputText class="w-full rounded-lg border border-gray-200 bg-gray-200 px-4 py-3 text-sm focus:bg-gray-100 focus:outline-none focus:border-purple-400"
                           @bind-Value="matchitemModel.Value"
                           type="text"
                           placeholder="@TextHelperResFile.AddValue" />
            </div>
        </div>
        <div class="sm:col-span-2">
            <div class="mt-2.5">
                <InputText class="w-full rounded-lg border border-gray-200 bg-gray-200 px-4 py-3 text-sm focus:bg-gray-100 focus:outline-none focus:border-purple-400"
                           @bind-Value="matchitemModel.Text"
                           type="text"
                           placeholder="@TextHelperResFile.AddText" />
            </div>
        </div>
    </div>
    <div class="mt-4">
        <button type="submit" class="block w-full rounded-md bg-green-600 px-3.5 py-2.5 text-center text-sm font-semibold text-white shadow-sm hover:bg-green-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-green-600">
            @TextHelperResFile.AddInformation
        </button>
    </div>
    @if (modelList.Count() > 0)
    {
        <div class="mt-3">
            <table class="table-auto">
                <thead>
                    <tr>
                        @if (StatusMatchWord)
                        {
                            <th></th>
                        }
                        <th>Kode</th>
                        <th>Link</th>
                        <th>Tekst</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in modelList)
                    {
                        int lengthCount = 35;
                        string textValue = (item.Value.Length > lengthCount) ? item.Value.Substring(0, lengthCount) + "..." : item.Value;
                        <tr>
                            @if (StatusMatchWord)
                            {
                                <td class="px-4 py-2">
                                    <a href="/delete-matchword/@item.CodeValue.Replace("{{","").Replace("}}","")" class="rounded-[1rem] bg-red-500 p-2 text-white hover:bg-red-600">
                                        Fjern
                                    </a>
                                </td>
                            }
                            <td class="px-4 py-2">@item.CodeValue</td>
                            <td class="px-4 py-2">@textValue</td>
                            <td class="px-4 py-2">@item.Text</td>
                            <td class="px-4 py-2">@((item.MatchWord) ? "I brug" : "")</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</EditForm>

@code {
    [SupplyParameterFromForm]
    MatchModel matchitemModel { get; set; } = new MatchModel
        {
            Text = string.Empty,
            Value = string.Empty
        };

    public bool searchData { get; set; } = false;
    public EnumStatusValue status { get; set; }
    public string message { get; set; } = string.Empty;
    public bool StatusMatchWord { get; set; } = false;


    MatchViewModel model = new MatchViewModel();
    List<MatchListViewModel> modelList = new List<MatchListViewModel>();

    protected override async Task OnInitializedAsync()
    {
        _log.Log("User show the page. - Match Page", EnumStatusValue.Info);
        await base.OnInitializedAsync();
        var resultData = await _faq.GetMatchWord();
        if (resultData.Status == EnumStatusValue.Success)
        {
            var dataResult = resultData.GetData.Cast<MatchViewModel>().FirstOrDefault();
            if (dataResult != null)
            {
                if (dataResult.data.Count > 0)
                {
                    var listItem = dataResult.data.Cast<MatchListViewModel>().ToList();
                    foreach (var item in listItem)
                    {
                        modelList.Add(new MatchListViewModel
                            {
                                Text = item.Text,
                                CodeValue = item.CodeValue,
                                Value = item.Value,
                                MatchWord = item.MatchWord
                            });
                    }
                }
            }
        }

        //settings information
        var resultDataBool = await setting.RemoveMatchWordStatus();
        if(resultDataBool != null)
        {
            var resultboolCast = resultDataBool.GetData.Cast<bool>().FirstOrDefault();
            if(resultboolCast)
            {
                StatusMatchWord = resultboolCast;
            }
        }
    }

    private async Task HandleSubmitMatch()
    {
        var resultData = await _faq.MatchWord(matchitemModel);
        status = resultData.Status;
        _log.Log(resultData.Message, status);
        if (status == EnumStatusValue.Info)
        {
            var dataResult = resultData.GetData.Cast<MatchViewModel>().FirstOrDefault();
            if (dataResult != null)
            {
                nav.NavigateTo("matchword");
            }
        }
        else
        {
            message = resultData.MessegeTouser;
        }
    }
}
