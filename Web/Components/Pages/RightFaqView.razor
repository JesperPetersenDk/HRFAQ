@page "/rightfaq/{codeValueInput}"
@using HrFaq.Application.Model

@inject IFaqService faq
@inject ILoggningService _log
@inject NavigationManager nav

<div class="mx-auto max-w-3xl text-center">
    <h2 class="text-3xl font-bold tracking-tight text-gray-900 sm:text-4xl">@TextHelperResFile.TopTitleAnswer.ReplaceText(null)</h2>
    <p class="leading-8 mt-2 text-lg text-gray-600">@TextHelperResFile.TopDeckAnswer.ReplaceText(null)</p>
    <AlertInformation Message="@message"
                      Status="@status" />
</div>
<EditForm Model="@model" FormName="searchHome" OnSubmit="HandleSubmitMatch" class="mx-auto mt-4 max-w-3xl">
    <div class="grid-cols-1 grid gap-x-8 gap-y-6 sm:grid-cols-4">
        <div class="sm:col-span-4">
            <div class="mt-2.5">
                <InputText class="w-full rounded-lg border border-gray-200 bg-gray-200 px-4 py-3 text-sm focus:bg-gray-100 focus:outline-none focus:border-purple-400"
                           @bind-Value="model.SearchWord"
                           type="text"
                           placeholder="@TextHelperResFile.InputAnswer" />
            </div>
        </div>
        <div class="sm:col-span-4">
            <div class="mt-2.5">
                <InputText class="w-full rounded-lg border border-gray-200 bg-gray-200 px-4 py-3 text-sm focus:bg-gray-100 focus:outline-none focus:border-purple-400"
                           @bind-Value="model.Answer"
                           type="text"
                           placeholder="@TextHelperResFile.InputAnswer" />
            </div>
        </div>
    </div>
    <div class="mt-4">
        <button type="submit" class="block w-full rounded-md bg-green-600 px-3.5 py-2.5 text-center text-sm font-semibold text-white shadow-sm hover:bg-green-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-green-600">
            @TextHelperResFile.AddInformation
        </button>
    </div>
</EditForm>

@code {

    RightFaqModel model { get; set; } = new RightFaqModel
        {
            Answer = string.Empty,
            SearchWord = string.Empty
        };

    [Parameter]
    public string codeValueInput { get; set; }

    public EnumStatusValue status { get; set; }
    public string message { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        _log.Log("User show the page. - Answer page", EnumStatusValue.Info);

        var result = await faq.GetSingleById(codeValueInput);
        if(result != null)
        {
            var castData = result.GetData.Cast<RightFaqModel>().FirstOrDefault();
            if(castData != null)
            {
                model.Answer = castData.Answer;
                model.SearchWord = castData.SearchWord;
            }
        }
    }

    private async Task HandleSubmitMatch()
    {
        var resultData = await faq.UpdateFaq(codeValueInput, model.SearchWord, model.Answer);
        status = resultData.Status;
        message = resultData.MessegeTouser;
        _log.Log(resultData.Message, status);
        if (status == EnumStatusValue.Success)
        {

            //Reload page
            nav.NavigateTo("/rightfaq/" + codeValueInput);
        }
    }
}
